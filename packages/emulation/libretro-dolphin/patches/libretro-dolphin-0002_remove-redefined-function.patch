From 0e39bc85ed2d20de6290490c73d8a0f715a3d57f Mon Sep 17 00:00:00 2001
From: evants <evan@threatstream.com>
Date: Sun, 14 Feb 2016 17:25:39 -0500
Subject: [PATCH] Fixed core.ccp so it will compile

you hand a redundant function declaration which was causing a modern c compiler to fatally error.  This fixes the bug.
---
 Source/Core/Core/Core.cpp | 95 -----------------------------------------------
 1 file changed, 95 deletions(-)

diff --git a/Source/Core/Core/Core.cpp b/Source/Core/Core/Core.cpp
index 16a73cd..1437b6b 100644
--- a/Source/Core/Core/Core.cpp
+++ b/Source/Core/Core/Core.cpp
@@ -587,101 +587,6 @@ void EmuThread()
 		s_on_stopped_callback();
 }
 
-// Initialize and create emulation thread
-// Call browser: Init():s_emu_thread().
-// See the BootManager.cpp file description for a complete call schedule.
-void EmuThread()
-{
-	const SCoreStartupParameter& core_parameter =
-		SConfig::GetInstance().m_LocalCoreStartupParameter;
-
-	Common::SetCurrentThreadName("Emuthread - Starting");
-
-	if (SConfig::GetInstance().m_OCEnable)
-		DisplayMessage("WARNING: running at non-native CPU clock! Game may not be stable.", 8000);
-	DisplayMessage(cpu_info.brand_string, 8000);
-	DisplayMessage(cpu_info.Summarize(), 8000);
-	DisplayMessage(core_parameter.m_strFilename, 3000);
-
-	Movie::Init();
-
-	HW::Init();
-
-	if (!g_video_backend->Initialize(s_window_handle))
-	{
-		PanicAlert("Failed to initialize video backend!");
-		Host_Message(WM_USER_STOP);
-		return;
-	}
-
-	OSD::AddMessage("Dolphin " + g_video_backend->GetName() + " Video Backend.", 5000);
-
-	if (cpu_info.HTT)
-		SConfig::GetInstance().m_LocalCoreStartupParameter.bDSPThread = cpu_info.num_cores > 4;
-	else
-		SConfig::GetInstance().m_LocalCoreStartupParameter.bDSPThread = cpu_info.num_cores > 2;
-
-	if (!DSP::GetDSPEmulator()->Initialize(core_parameter.bWii, core_parameter.bDSPThread))
-	{
-		HW::Shutdown();
-		g_video_backend->Shutdown();
-		PanicAlert("Failed to initialize DSP emulator!");
-		Host_Message(WM_USER_STOP);
-		return;
-	}
-
-	if (!g_controller_interface.IsInit())
-	{
-		Pad::Initialize(s_window_handle);
-		Keyboard::Initialize(s_window_handle);
-		init_controllers = true;
-	}
-
-	// Load and Init Wiimotes - only if we are booting in Wii mode
-	if (core_parameter.bWii)
-	{
-		Wiimote::Initialize(s_window_handle, !s_state_filename.empty());
-
-		// Activate Wiimotes which don't have source set to "None"
-		for (unsigned int i = 0; i != MAX_BBMOTES; ++i)
-			if (g_wiimote_sources[i])
-				GetUsbPointer()->AccessWiiMote(i | 0x100)->Activate(true);
-
-	}
-
-	AudioCommon::InitSoundStream();
-
-	// The hardware is initialized.
-	s_hardware_initialized = true;
-
-	// Boot to pause or not
-	Core::SetState(core_parameter.bBootToPause ? Core::CORE_PAUSE : Core::CORE_RUN);
-
-	// Load GCM/DOL/ELF whatever ... we boot with the interpreter core
-	PowerPC::SetMode(PowerPC::MODE_INTERPRETER);
-
-	CBoot::BootUp();
-
-	// Setup our core, but can't use dynarec if we are compare server
-	if (core_parameter.iCPUCore != SCoreStartupParameter::CORE_INTERPRETER
-	    && (!core_parameter.bRunCompareServer || core_parameter.bRunCompareClient))
-	{
-		PowerPC::SetMode(PowerPC::MODE_JIT);
-	}
-	else
-	{
-		PowerPC::SetMode(PowerPC::MODE_INTERPRETER);
-	}
-
-	// Update the window again because all stuff is initialized
-	Host_UpdateDisasmDialog();
-	Host_UpdateMainFrame();
-
-#ifndef __LIBRETRO__
-   VideoPrepare();
-#endif
-}
-
 // Set or get the running state
 
 void SetState(EState _State)
